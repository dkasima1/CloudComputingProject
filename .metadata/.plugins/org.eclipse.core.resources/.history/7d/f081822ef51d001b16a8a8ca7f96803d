package fat_tree_inet.simulations;

import inet.examples.inet.ipv4hook.MyHost;
import inet.examples.inet.ipv4hook.MyRouter;
import inet.mobility.base.MovingMobilityBase;
import inet.networklayer.configurator.ipv4.Ipv4FlatNetworkConfigurator;
import inet.node.ethernet.EtherSwitch;
import inet.node.inet.StandardHost;


@license(LGPL);
//
// TODO documentation
//
network Network
{
    parameters:
        @display("bgb=1330,893");
        int num_leafs @prompt("Number of end users") = default(16);
        int num_aggs = 16;
        int num_spines = 4;
        int num @display("bgb=1326,1100");
    types:
        channel LeafAggChannel
        {
        }
        channel AggSpineChannel
        {
        }


    submodules:
        spine[num_spines]: EtherSwitch {
            parameters:
                @display("p=100,200,r,75");
            gates:
                ethg[4];
        }

        agg1[num_aggs/2]: EtherSwitch {
            parameters:
                @display("p=100,300,r,75");
            gates:
                ethg[num_leafs];
        }
        agg2[num_aggs/2]: EtherSwitch {
            parameters:
                @display("p=100,400,r,75");
            gates:
                ethg[num_leafs];
        }
        server[num_leafs]: StandardHost {
            parameters:
                @display("p=100,500,r,75");
        }
    connections allowunconnected:
        for i=0..num_spines-1, for j=0..num_aggs-1 {
            spine[i].ethg[j] <--> AggSpineChannel <--> agg[j].ethg[num_leafs+1+i];
        }
        for j=0..(num_leafs)-1 {
            server[i].ethg++ <--> LeafAggChannel <--> agg[num_aggs].ethg[1+num_leafs+j];
        }
}

